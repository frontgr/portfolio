import asyncio
from os import environ

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F 
from aiogram.filters.callback_data import CallbackData

from db import DB
from filters import RequestFilter, ApprovedFilter, AdminFilter
from keyboards import get_keyboard




bot_token = environ['BOT_TOKEN']
admins = [environ['ADMIN_I'], environ['ADMIN_K'], environ['ADMIN_E']]


bot = Bot(token=bot_token)
dp = Dispatcher()



class RequestCallback(CallbackData, prefix='my_callback'):
    prefix: str
    tg_id: int
    name: str
    username: str|None



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —á–∞—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@dp.message(RequestFilter(), Command('start'))
async def cmd_start_not_approved_chats(message: types.Message):
    await message.answer(text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë, –∞–¥–º–∏–Ω –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É =(')


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —á–∞—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@dp.message(ApprovedFilter(), Command('start'))
async def cmd_start_approved_chats(message: types.Message):
    await message.answer(text=f'–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è "{message.chat.full_name}" —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.')
    
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@dp.message(AdminFilter(), Command('start'))
async def cmd_start_admin(message: types.Message):
    DB.insert_receivers(message.chat.id, message.chat.full_name, message.chat.username)
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {message.chat.full_name}')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ 
@dp.message(Command('start'))
async def cmd_start_new_chats(message: types.Message):
    DB.insert_request(message.chat.id, message.chat.full_name, message.chat.username)

    allow_data = RequestCallback(prefix='Allow', tg_id=message.chat.id, name=message.chat.full_name, username=message.chat.username)
    deny_data =RequestCallback(prefix='Deny', tg_id=message.chat.id, name=message.chat.full_name, username=message.chat.username)

    await message.answer(text=f'''
        –ü—Ä–∏–≤–µ—Ç, {message.chat.full_name}! \n–Ø –±–æ—Ç FrontGR, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö. –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞...''')
    
    await bot.send_message(
            chat_id=DB.get_admin(), 
            text=f'''–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ üîî\n\n–ò–º—è: {message.chat.full_name} \nUsername: {message.chat.username or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} \nID: {message.chat.id}\n\n –ó–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.''',
            reply_markup=get_keyboard(allow_data.pack(), deny_data.pack())
        )



@dp.callback_query(RequestCallback.filter(F.prefix == 'Allow'))
async def callback_allow(callback: types.CallbackQuery, callback_data: RequestCallback):
    DB.insert_receivers(callback_data.tg_id, callback_data.name, callback_data.username)
    DB.delete_request(callback_data.tg_id)
    await callback.message.edit_text(text=f'''
            –ò–º—è: {callback_data.name} \nUsername: {callback_data.username or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} \nID: {callback_data.tg_id}\n\n–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ''')
    await callback.answer('–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ')


@dp.callback_query(RequestCallback.filter(F.prefix == 'Deny'))
async def callback_deny(callback: types.CallbackQuery, callback_data: RequestCallback):
    DB.delete_request(callback_data.tg_id)
    await callback.message.edit_text(text=f'''
            –ò–º—è: {callback_data.name} \nUsername: {callback_data.username or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} \nID: {callback_data.tg_id}\n\n–û—Ç–∫–∞–∑–∞–Ω–æ ‚õî''')
    await callback.answer('–û—Ç–∫–∞–∑–∞–Ω–æ ‚õî')



async def main():
    DB(admins)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
